{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52],"program":"/Users/seanchen/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","autocfg","/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=6420141ad935bf7b","-C","extra-filename=-6420141ad935bf7b","--out-dir","/Users/seanchen/Projects/rust-data-structures/bloom-filter/target/rls/debug/deps","-L","dependency=/Users/seanchen/Projects/rust-data-structures/bloom-filter/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/seanchen/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,80,114,111,106,101,99,116,115,47,114,117,115,116,45,100,97,116,97,45,115,116,114,117,99,116,117,114,101,115,47,98,108,111,111,109,45,102,105,108,116,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,97,117,116,111,99,102,103,45,54,52,50,48,49,52,49,97,100,57,51,53,98,102,55,98,46,114,108,105,98]},"prelude":{"crate_id":{"name":"autocfg","disambiguator":[4407942998143921244,9731354344580800077]},"crate_root":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src","external_crates":[{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16127014926937644840,10617917418627549874]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16744842085366098991,10021575423373849340]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12219308825194572396,1593244597194478439]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7720465312014950334,11982745657479504049]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11777904974825780541,8937117351976831060]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15945735692096346127,1348883009948969371]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10033866232596031485,2828804971217722296]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":8,"id":{"name":"rustc_demangle","disambiguator":[3105781163621059830,14714552640967562592]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[16569648819360698606,17003220646964807291]}},{"file_name":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[2023344073335283670,3652609272169039894]}}],"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9513,"line_start":1,"line_end":305,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1525,"byte_end":1530,"line_start":51,"line_end":51,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9513,"line_start":1,"line_end":305,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/seanchen/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":34},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":86},{"krate":0,"index":178},{"krate":0,"index":184},{"krate":0,"index":180},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":128}],"decl_id":null,"docs":" A Rust library for build scripts to automatically configure code based on\n compiler support.  Code snippets are dynamically tested to see if the `rustc`\n will accept them, rather than hard-coding specific version support.","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1182,"byte_end":1221,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1222,"byte_end":1244,"line_start":38,"line_end":38,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":9664,"byte_end":9669,"line_start":9,"line_end":9,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" A common error type for the `autocfg` crate.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1703,"byte_end":1710,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"AutoCfg","qualname":"::AutoCfg","value":"AutoCfg {  }","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85}],"decl_id":null,"docs":" Helper to detect compiler features for `cfg` output in build scripts.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2009,"byte_end":2013,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"emit","qualname":"::emit","value":"fn (cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a config flag for rustc on standard out.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2349,"byte_end":2359,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"rerun_path","qualname":"::rerun_path","value":"fn (path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a line telling Cargo to rerun the build script if `path` changes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2737,"byte_end":2746,"line_start":95,"line_end":95,"column_start":8,"column_end":17},"name":"rerun_env","qualname":"::rerun_env","value":"fn (var: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a line telling Cargo to rerun the build script if the environment\n variable `var` changes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2929,"byte_end":2932,"line_start":104,"line_end":104,"column_start":8,"column_end":11},"name":"new","qualname":"::new","value":"fn () -> AutoCfg","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3304,"byte_end":3307,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<AutoCfg>::new","value":"fn () -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3808,"byte_end":3816,"line_start":132,"line_end":132,"column_start":12,"column_end":20},"name":"with_dir","qualname":"<AutoCfg>::with_dir","value":"fn <T> (dir: T) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance with the specified output directory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5116,"byte_end":5135,"line_start":167,"line_end":167,"column_start":12,"column_end":31},"name":"probe_rustc_version","qualname":"<AutoCfg>::probe_rustc_version","value":"fn (&self, major: usize, minor: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the current `rustc` reports a version greater than\n or equal to \"`major`.`minor`\".\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5395,"byte_end":5413,"line_start":173,"line_end":173,"column_start":12,"column_end":30},"name":"emit_rustc_version","qualname":"<AutoCfg>::emit_rustc_version","value":"fn (&self, major: usize, minor: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\n if the current `rustc` is at least that version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6863,"byte_end":6873,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"probe_path","qualname":"<AutoCfg>::probe_path","value":"fn (&self, path: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given path can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7182,"byte_end":7195,"line_start":226,"line_end":226,"column_start":12,"column_end":25},"name":"emit_has_path","qualname":"<AutoCfg>::emit_has_path","value":"fn (&self, path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_PATH` if `probe_path` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7398,"byte_end":7411,"line_start":233,"line_end":233,"column_start":12,"column_end":25},"name":"emit_path_cfg","qualname":"<AutoCfg>::emit_path_cfg","value":"fn (&self, path: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_path` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7739,"byte_end":7750,"line_start":246,"line_end":246,"column_start":12,"column_end":23},"name":"probe_trait","qualname":"<AutoCfg>::probe_trait","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given trait can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8101,"byte_end":8115,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"emit_has_trait","qualname":"<AutoCfg>::emit_has_trait","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TRAIT` if `probe_trait` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8320,"byte_end":8334,"line_start":262,"line_end":262,"column_start":12,"column_end":26},"name":"emit_trait_cfg","qualname":"<AutoCfg>::emit_trait_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_trait` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8651,"byte_end":8661,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"probe_type","qualname":"<AutoCfg>::probe_type","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given type can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8997,"byte_end":9010,"line_start":284,"line_end":284,"column_start":12,"column_end":25},"name":"emit_has_type","qualname":"<AutoCfg>::emit_has_type","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TYPE` if `probe_type` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9213,"byte_end":9226,"line_start":291,"line_end":291,"column_start":12,"column_end":25},"name":"emit_type_cfg","qualname":"<AutoCfg>::emit_type_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_type` returns true.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":9718,"byte_end":9723,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":10086,"byte_end":10091,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,118,101,114,115,105,111,110,46,114,115],"byte_start":11217,"byte_end":11224,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2984,"byte_end":2991,"line_start":108,"line_end":108,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":9718,"byte_end":9723,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":130},"to":{"krate":1,"index":2484}},{"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":10086,"byte_end":10091,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":130},"to":{"krate":2,"index":8472}},{"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,118,101,114,115,105,111,110,46,114,115],"byte_start":11217,"byte_end":11224,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,115,101,97,110,99,104,101,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,117,116,111,99,102,103,45,48,46,49,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2984,"byte_end":2991,"line_start":108,"line_end":108,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}}]}